export async function generateMetadata({
  params: {locale}
}: Omit<Props, 'children'>): Promise<Metadata> {
  const t = await getTranslations({locale, namespace: 'LocaleLayout'});
  const formatter = await getFormatter({locale});
  const now = await getNow({locale});
  const timeZone = await getTimeZone({locale});

  return {
    metadataBase: new URL('http://localhost:3000'),
    title: t('title'),
    description: t('description'),
    other: {
      currentYear: formatter.dateTime(now, {year: 'numeric'}),
      timeZone: timeZone || 'N/A'
    }
  };
}






	/* 2xl */
	@media screen and ( max-width: 1536px )
		border-width: 100px 70px 70px 70px
	/* xl */
	@media screen and ( max-width: 1280px )
		border-width: 90px 50px 50px 50px
	/* lg */
	@media screen and ( max-width: 1024px )
		border-width: 90px 50px 50px 50px
	/* md */
	@media screen and ( max-width: 768px )
		border-width: 80px 40px 40px 40px
	/* sm */
	@media screen and ( max-width: 640px )
		display: none











import { NextIntlClientProvider, useMessages } from "next-intl";
// import { getTranslations } from "next-intl/server";

// import { Inter } from 'next/font/google';

// import { type Metadata } from "next";

// import { Locale } from "@/locales";
// import Link from "next/link";

// const inter = Inter({ subsets: ['latin'] });

// // import './globals.css';


// interface RootLayoutProps {
//   children: React.ReactNode;
//   params: {
//     locale: string;
//   };
// }


// function ParentLayout({
//   children,
//   params: { locale },
// }: Readonly<RootLayoutProps>) {
//   const messages = useMessages();

//   return (
//     <html lang={locale}>
//       <body className={inter.className}>
//         <NextIntlClientProvider locale={locale} messages={messages}>
//           <header>
//             Custom header education center
//             <Link href='/'>about</Link>
//           </header>
//           {children}
//           <footer>Custom footer education center</footer>
//         </NextIntlClientProvider>
//       </body>
//     </html>
//   );
// };


// export async function generateMetadata({
//   params: { locale },
// }: {
//   params: { locale: Locale };
// }): Promise<Metadata> {
//   const t = await getTranslations({ locale, namespace: 'metadata' });

//   return {
//     title: t('title'),
//     description: t('description'),
//   };
// }



// export default ParentLayout;




















// <header>
// <Link href={`/${localActive}/educational-center`}>educational-center</Link>
// <Link href={`/${localActive}/language`}>language</Link>
// <Header/>
// </header>


// <h1>home</h1>
// <h1 className='text-4xl mb-4 font-semibold'>{t('about')}</h1>
// <p>{t('about')}</p>
















$imagePAth: '../../../../../public/assets/images/language/background.png'







.requests
    display: flex
    justify-content: space-around
    position: relative
    top: -20px
    flex: 30%

.send_request
    border-color: #006ED2 #006ED2 transparent #006ED2
    border-style: solid
    border-width: 100px 70px 70px 70px
    height: 0px
    width: 0px
    position: relative
    top: 0
    transition: .4s
    cursor: pointer
    &:hover
        top: 20px


.take_test
    border-color: #F9CC48 #F9CC48 transparent #F9CC48
    border-style: solid
    border-width: 100px 70px 70px 70px
    height: 0px
    width: 0px
    position: relative
    top: 0
    transition: .4s
    cursor: pointer
    margin-left: 20px !important
    &:hover
        top: 20px


.triangle_text
    font-size: 18px
    font-weight: 400
    position: absolute
    bottom: 7px
    width: 100px
    right: 0
    left: -49px
    display: flex
    justify-content: center
    text-align: center
    text-transform: uppercase
    color: white




.three
    display: grid
    grid-auto-rows: 1fr
    grid-template-columns: 1fr 1fr 1fr
    align-items: center
    div
        margin: 0 auto

















.header
  position: sticky
  top: 0
  width: 100%
  overflow: hidden


.sticky
    background-color: red
    transition: .5s

.nav
    display: flex
    justify-content: space-evenly
    align-items: center
    margin: 30px auto
    transition: .5s



.row
    display: flex

.logo
    flex: 33%

.switcher
    flex: 33%



















































.response
    /* xs */
    width: 100%
    height: 300px
    background-color: yellow
    /* xxl */
    @media screen and ( max-width: 1400px )
        width: 100%
        height: 300px
        background-color: green
    /* xl */
    @media screen and ( max-width: 1200px )
        width: 100%
        height: 300px
        background-color: blue
    @media screen and (max-width:1024px) and (-webkit-min-device-pixel-ratio:0)
        width: 100%
        height: 300px
        background-color: pink
    /* lg */
    @media screen and ( max-width: 992px )
        width: 100%
        height: 300px
        background-color: orange	
    /* md */
    @media screen and ( max-width: 768px )
        width: 100%
        height: 300px
        background-color: purple	
    /* sm */
    @media screen and ( max-width: 640px )
    @media screen and ( max-width: 576px )
        width: 100%
        height: 300px
        background-color: black
    /* xs */
    @media screen and ( max-width: 475px )
        width: 100%
        height: 300px
        background-color: aqua
    @media only screen and (min-device-width: 320px) and (max-device-width: 480px) and (-webkit-device-pixel-ratio: 2) and (device-aspect-ratio: 2/3)
        width: 100%
        height: 300px
        background-color: red






    /* @4xl */
    @media screen and (max-width: 2560px)
    /* @3xl */
    @media screen and (max-width: 1920px)
    /* @2xl */
    @media screen and (max-width: 1600px)
    /* @xl */
    @media screen and (max-width: 1440px)
    /* @lg */
    @media screen and (max-width: 1280px)
    /* @md */
    @media screen and (max-width: 1024px)
    /* @sm */
    @media screen and (max-width: 768px)
    /* @xs */
    @media screen and (max-width: 600px)
    /* @2xs */
    @media screen and (max-width: 480px)
    /* @3xs */
    @media screen and (max-width: 360px)







.response
    /* @4xl */
    @media screen and (max-width: 2560px)
        width: 100%
        height: 300px
        background-color: green
    /* @3xl */
    @media screen and (max-width: 1920px)
        width: 100%
        height: 300px
        background-color: brown
    /* @2xl */
    @media screen and (max-width: 1600px)
        width: 100%
        height: 300px
        background-color: grey
    /* @xl */
    @media screen and (max-width: 1440px)
        width: 100%
        height: 300px
        background-color: gold
    /* @lg */
    @media screen and (max-width: 1280px)
        width: 100%
        height: 300px
        background-color: pink
    /* @md */
    @media screen and (max-width: 1024px)
        width: 100%
        height: 300px
        background-color: yellow
    /* @sm */
    @media screen and (max-width: 768px)
        width: 100%
        height: 300px
        background-color: purple
    /* @xs */
    @media screen and (max-width: 600px)
        width: 100%
        height: 300px
        background-color: aqua
    /* @2xs */
    @media screen and (max-width: 480px)
        width: 100%
        height: 300px
        background-color: green
    /* @3xs */
    @media screen and (max-width: 360px)
        width: 100%
        height: 300px
        background-color: black












// import { ArrayOfPrimitivesInputProps, ArrayOfPrimitivesFunctions, ArrayInputFunctionsProps, ArraySchemaType } from 'sanity'

// function ArrayFunctions(props: ArrayInputFunctionsProps<string | number | any, ArraySchemaType>) {
//     const valRules = props?.schemaType?.validation?.[0]?._rules || []
//     const max = valRules.find((r: any) => r.flag === 'max')?.constraint
//     const total = props?.value?.length || 0
//     if (!isNaN(max) && total >= max) return null
//     return <ArrayOfPrimitivesFunctions {...props} />
// }

// function ArrayMaxItems(props: ArrayOfPrimitivesInputProps) {
//     return props.renderDefault({ ...props, arrayFunctions: ArrayFunctions })
// }



import { SlugInput, defineArrayMember, defineField } from "sanity";
import { basePath } from "../../../env";


        defineField({
            type: 'array',
            name: 'myArray',
            title: 'My Array Max 3 item',
            // components: { input: ArrayMaxItems },
            of: [ {
                title: 'Name',
                name: 'name',
                type: 'string',
            }],
            validation: (rule) => rule.max(3),
        }),








e: React.ChangeEvent<HTMLInputElement>





.response
    /* @4xl */
    @media screen and (max-width: 2560px)
        width: 100%
        height: 300px
        background-color: green
    /* @3xl */
    @media screen and (max-width: 1920px)
        width: 100%
        height: 300px
        background-color: brown
    /* @2xl */
    @media screen and (max-width: 1600px)
        width: 100%
        height: 300px
        background-color: grey
    /* @xl */
    @media screen and (max-width: 1440px)
        width: 100%
        height: 300px
        background-color: gold
    /* @lg */
    @media screen and (max-width: 1280px)
        width: 100%
        height: 300px
        background-color: pink
    /* @md */
    @media screen and (max-width: 1024px)
        width: 100%
        height: 300px
        background-color: yellow
    /* @sm */
    @media screen and (max-width: 768px)
        width: 100%
        height: 300px
        background-color: purple
    /* @xs */
    @media screen and (max-width: 600px)
        width: 100%
        height: 300px
        background-color: aqua
    /* @2xs */
    @media screen and (max-width: 480px)
        width: 100%
        height: 300px
        background-color: green
    /* @3xs */
    @media screen and (max-width: 360px)
        width: 100%
        height: 300px
        background-color: black





























		const path: { src: string, width: number, height: number } | any = urlForImage(item.image);



import Autoplay from 'embla-carousel-autoplay';
import useEmblaCarousel from 'embla-carousel-react';
import { EmblaOptionsType } from 'embla-carousel';

	const options: EmblaOptionsType = { loop: true, align: 'center',};
	const [emblaRef, emblaApi] = useEmblaCarousel(options, [Autoplay()]);





Readonly<RootProps>























 <Image
                key={index}
                src={path?.src}
                alt={image?.alt}
                className={styles.image}
                width={500} 
                height={500}
                priority
            />






















.line
    /* @4xl */
    @media screen and (max-width: 2560px)
        &:nth-child(7n)
            &:before
                display: none
    /* @3xl */
    @media screen and (max-width: 1920px)
        &:nth-child(7n)
            &:before
                display: none
    /* @2xl */
    @media screen and (max-width: 1600px)
        &:nth-child(8n)
            &:before
                display: none
    /* @xl */
    @media screen and (max-width: 1440px)
        &:nth-child(7n)
            &:before
                display: none
    /* @lg */
    @media screen and (max-width: 1280px)
        &:nth-child(7n)
            &:before
                display: none
    /* @md */
    @media screen and (max-width: 1024px)
        &:nth-child(7n)
            &:before
                display: none
    /* @sm */
    @media screen and (max-width: 768px)
        &:nth-child(7n)
            &:before
                display: none
    /* @xs */
    @media screen and (max-width: 600px)
        &:before
            display: none




















/////////////////////////////

.hex 
    position: relative 
    float: left 
    height: 100px 
    min-width: 100px 
    padding: 12px 
    margin: 4px 
    font-weight: bold 
    text-align: center 
    background: linear-gradient(to right, rgb(199, 41, 41), rgb(243, 67, 54)) 
    -webkit-clip-path: polygon(25px 0px, calc(100% - 25px) 0px, 100% 50%, calc(100% - 25px) 100%, 25px 100%, 0px 50%) 
    &.gradient-bg 
        color: white 
        &:before 
            background: linear-gradient(to right, rgb(199, 41, 41), rgb(243, 67, 54)) 
    &:before 
        position: absolute 
        content: '' 
        height: calc(100% - 14px) 
        width: calc(100% - 14px) 
        left: 7px 
        top: 7px 
        -webkit-clip-path: polygon(22px 0px, calc(100% - 22px) 0px, 100% 50%, calc(100% - 22px) 100%, 22px 100%, 0px 50%) 
        z-index: -1 
    span 
        display: block 
        margin-top: 50px 
        padding: 8px 
        transform: translateY(-50%) 
